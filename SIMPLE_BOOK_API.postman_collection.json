{
	"info": {
		"_postman_id": "efc8777c-e985-4ad7-b27b-a5290234dcc6",
		"name": "SIMPLE BOOK API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36632408"
	},
	"item": [
		{
			"name": "STATUS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responsedata=pm.response.json();\r",
							"pm.test(\"status code should be success\", function () {\r",
							"    pm.expect(responsedata.status).to.eql(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/status",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "LIST OF BOOKS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"  pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"  });\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required schema\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(book) {\r",
							"    pm.expect(book).to.be.an('object');\r",
							"    pm.expect(book).to.have.property('id');\r",
							"    pm.expect(book).to.have.property('name');\r",
							"    pm.expect(book).to.have.property('type');\r",
							"    pm.expect(book).to.have.property('available');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each book object contains expected fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book).to.have.property('name').that.is.a('string');\r",
							"        pm.expect(book).to.have.property('type').that.is.a('string');\r",
							"        pm.expect(book).to.have.property('available').that.is.a('boolean');\r",
							"        pm.expect(book).to.have.property('id').that.is.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/books",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.response.json().accessToken)\r",
							"var jsondata=pm.response.json().accessToken;\r",
							"pm.collectionVariables.set(\"token\",jsondata)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{$randomUserName}}\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api-clients",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET A SINGLE BOOK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response has the expected schema\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property('id');\r",
							"    pm.expect(response).to.have.property('name');\r",
							"    pm.expect(response).to.have.property('author');\r",
							"    pm.expect(response).to.have.property('isbn');\r",
							"    pm.expect(response).to.have.property('type');\r",
							"    pm.expect(response).to.have.property('price');\r",
							"    pm.expect(response).to.have.property('current-stock');\r",
							"    pm.expect(response).to.have.property('available');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/books/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "SUBMIT AN ORDER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test('Verify the \"created\" property is boolean and true', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.created).to.be.a('boolean');\r",
							"    pm.expect(responseData.created).to.be.true;\r",
							"});\r",
							"const responseData = pm.response.json();\r",
							"pm.collectionVariables.set(\"orderId\", responseData.orderId);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"John\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/orders",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ALL ORDERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(response).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each object has 'id' property\", function () {\r",
							"    response.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/orders",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET AN ORDER",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/orders/:orderId",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "book_id",
			"value": "z0K4uSlagrUovJZkQamK5",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}